{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Torchmeta A collection of extensions and data-loaders for few-shot learning & meta-learning in PyTorch . Torchmeta contains popular meta-learning benchmarks, fully compatible with both torchvision and PyTorch's DataLoader . Features A unified interface for both few-shot classification and regression problems, to allow easy benchmarking on multiple problems and reproducibility. Helper functions for some popular problems, with default arguments from the literature. An thin extension of PyTorch's Module , called MetaModule , that simplifies the creation of certain meta-learning models (e.g. gradient based meta-learning methods). See the MAML example for an example using MetaModule . Datasets available Few-shot regression (toy problems): Sine waves ( Finn et al., 2017 ) Harmonic functions ( Lacoste et al., 2018 ) Sinusoid & lines ( Finn et al., 2018 ) Few-shot classification (image classification): Omniglot ( Lake et al., 2015 , 2019 ) Mini-ImageNet ( Vinyals et al., 2016 , Ravi et al., 2017 ) Tiered-ImageNet ( Ren et al., 2018 ) CIFAR-FS ( Bertinetto et al., 2018 ) Fewshot-CIFAR100 ( Oreshkin et al., 2018 ) Caltech-UCSD Birds ( Hilliard et al., 2019 , Wah et al., 2019 ) Double MNIST ( Sun, 2019 ) Triple MNIST ( Sun, 2019 ) Few-shot segmentation (semantic segmentation): Pascal5i 1-way Setup Installation You can install Torchmeta either using Python's package manager pip, or from source. To avoid any conflict with your existing Python setup, it is suggested to work in a virtual environment with virtualenv . To install virtualenv : pip install --upgrade virtualenv virtualenv venv source venv/bin/activate Requirements Python 3.5 or above PyTorch 1.3 or above Torchvision 0.4 or above Using pip This is the recommended way to install Torchmeta: pip install torchmeta From source You can also install Torchmeta from source. This is recommended if you want to contribute to Torchmeta. git clone https://github.com/tristandeleu/pytorch-meta.git cd pytorch-meta python setup.py install Example Minimal example This minimal example below shows how to create a dataloader for the 5-shot 5-way Omniglot dataset with Torchmeta. The dataloader loads a batch of randomly generated tasks, and all the samples are concatenated into a single tensor. For more examples, check the examples folder. from torchmeta.datasets.helpers import omniglot from torchmeta.utils.data import BatchMetaDataLoader dataset = omniglot ( \"data\" , ways = 5 , shots = 5 , test_shots = 15 , meta_train = True , download = True ) dataloader = BatchMetaDataLoader ( dataset , batch_size = 16 , num_workers = 4 ) for batch in dataloader : train_inputs , train_targets = batch [ \"train\" ] print ( 'Train inputs shape: {0}' . format ( train_inputs . shape )) # (16, 25, 1, 28, 28) print ( 'Train targets shape: {0}' . format ( train_targets . shape )) # (16, 25) test_inputs , test_targets = batch [ \"test\" ] print ( 'Test inputs shape: {0}' . format ( test_inputs . shape )) # (16, 75, 1, 28, 28) print ( 'Test targets shape: {0}' . format ( test_targets . shape )) # (16, 75) Advanced example Helper functions are only available for some of the datasets available. However, all of them are available through the unified interface provided by Torchmeta. The variable dataset defined above is equivalent to the following from torchmeta.datasets import Omniglot from torchmeta.transforms import Categorical , ClassSplitter , Rotation from torchvision.transforms import Compose , Resize , ToTensor from torchmeta.utils.data import BatchMetaDataLoader dataset = Omniglot ( \"data\" , # Number of ways num_classes_per_task = 5 , # Resize the images to 28x28 and converts them to PyTorch tensors (from Torchvision) transform = Compose ([ Resize ( 28 ), ToTensor ()]), # Transform the labels to integers (e.g. (\"Glagolitic/character01\", \"Sanskrit/character14\", ...) to (0, 1, ...)) target_transform = Categorical ( num_classes = 5 ), # Creates new virtual classes with rotated versions of the images (from Santoro et al., 2016) class_augmentations = [ Rotation ([ 90 , 180 , 270 ])], meta_train = True , download = True ) dataset = ClassSplitter ( dataset , shuffle = True , num_train_per_class = 5 , num_test_per_class = 15 ) dataloader = BatchMetaDataLoader ( dataset , batch_size = 16 , num_workers = 4 ) Note that the dataloader, receiving the dataset, remains the same. Citation Tristan Deleu, Tobias W\u00fcrfl, Mandana Samiei, Joseph Paul Cohen, and Yoshua Bengio. Torchmeta: A Meta-Learning library for PyTorch, 2019 [ ArXiv ] If you want to cite Torchmeta, use the following Bibtex entry: @misc{deleu2019torchmeta, title={{Torchmeta: A Meta-Learning library for PyTorch}}, author={Deleu, Tristan and W\\\"urfl, Tobias and Samiei, Mandana and Cohen, Joseph Paul and Bengio, Yoshua}, year={2019}, url={https://arxiv.org/abs/1909.06576}, note={Available at: https://github.com/tristandeleu/pytorch-meta} }","title":"Home"},{"location":"#torchmeta","text":"A collection of extensions and data-loaders for few-shot learning & meta-learning in PyTorch . Torchmeta contains popular meta-learning benchmarks, fully compatible with both torchvision and PyTorch's DataLoader .","title":"Torchmeta"},{"location":"#features","text":"A unified interface for both few-shot classification and regression problems, to allow easy benchmarking on multiple problems and reproducibility. Helper functions for some popular problems, with default arguments from the literature. An thin extension of PyTorch's Module , called MetaModule , that simplifies the creation of certain meta-learning models (e.g. gradient based meta-learning methods). See the MAML example for an example using MetaModule .","title":"Features"},{"location":"#datasets-available","text":"Few-shot regression (toy problems): Sine waves ( Finn et al., 2017 ) Harmonic functions ( Lacoste et al., 2018 ) Sinusoid & lines ( Finn et al., 2018 ) Few-shot classification (image classification): Omniglot ( Lake et al., 2015 , 2019 ) Mini-ImageNet ( Vinyals et al., 2016 , Ravi et al., 2017 ) Tiered-ImageNet ( Ren et al., 2018 ) CIFAR-FS ( Bertinetto et al., 2018 ) Fewshot-CIFAR100 ( Oreshkin et al., 2018 ) Caltech-UCSD Birds ( Hilliard et al., 2019 , Wah et al., 2019 ) Double MNIST ( Sun, 2019 ) Triple MNIST ( Sun, 2019 ) Few-shot segmentation (semantic segmentation): Pascal5i 1-way Setup","title":"Datasets available"},{"location":"#installation","text":"You can install Torchmeta either using Python's package manager pip, or from source. To avoid any conflict with your existing Python setup, it is suggested to work in a virtual environment with virtualenv . To install virtualenv : pip install --upgrade virtualenv virtualenv venv source venv/bin/activate","title":"Installation"},{"location":"#requirements","text":"Python 3.5 or above PyTorch 1.3 or above Torchvision 0.4 or above","title":"Requirements"},{"location":"#using-pip","text":"This is the recommended way to install Torchmeta: pip install torchmeta","title":"Using pip"},{"location":"#from-source","text":"You can also install Torchmeta from source. This is recommended if you want to contribute to Torchmeta. git clone https://github.com/tristandeleu/pytorch-meta.git cd pytorch-meta python setup.py install","title":"From source"},{"location":"#example","text":"","title":"Example"},{"location":"#minimal-example","text":"This minimal example below shows how to create a dataloader for the 5-shot 5-way Omniglot dataset with Torchmeta. The dataloader loads a batch of randomly generated tasks, and all the samples are concatenated into a single tensor. For more examples, check the examples folder. from torchmeta.datasets.helpers import omniglot from torchmeta.utils.data import BatchMetaDataLoader dataset = omniglot ( \"data\" , ways = 5 , shots = 5 , test_shots = 15 , meta_train = True , download = True ) dataloader = BatchMetaDataLoader ( dataset , batch_size = 16 , num_workers = 4 ) for batch in dataloader : train_inputs , train_targets = batch [ \"train\" ] print ( 'Train inputs shape: {0}' . format ( train_inputs . shape )) # (16, 25, 1, 28, 28) print ( 'Train targets shape: {0}' . format ( train_targets . shape )) # (16, 25) test_inputs , test_targets = batch [ \"test\" ] print ( 'Test inputs shape: {0}' . format ( test_inputs . shape )) # (16, 75, 1, 28, 28) print ( 'Test targets shape: {0}' . format ( test_targets . shape )) # (16, 75)","title":"Minimal example"},{"location":"#advanced-example","text":"Helper functions are only available for some of the datasets available. However, all of them are available through the unified interface provided by Torchmeta. The variable dataset defined above is equivalent to the following from torchmeta.datasets import Omniglot from torchmeta.transforms import Categorical , ClassSplitter , Rotation from torchvision.transforms import Compose , Resize , ToTensor from torchmeta.utils.data import BatchMetaDataLoader dataset = Omniglot ( \"data\" , # Number of ways num_classes_per_task = 5 , # Resize the images to 28x28 and converts them to PyTorch tensors (from Torchvision) transform = Compose ([ Resize ( 28 ), ToTensor ()]), # Transform the labels to integers (e.g. (\"Glagolitic/character01\", \"Sanskrit/character14\", ...) to (0, 1, ...)) target_transform = Categorical ( num_classes = 5 ), # Creates new virtual classes with rotated versions of the images (from Santoro et al., 2016) class_augmentations = [ Rotation ([ 90 , 180 , 270 ])], meta_train = True , download = True ) dataset = ClassSplitter ( dataset , shuffle = True , num_train_per_class = 5 , num_test_per_class = 15 ) dataloader = BatchMetaDataLoader ( dataset , batch_size = 16 , num_workers = 4 ) Note that the dataloader, receiving the dataset, remains the same.","title":"Advanced example"},{"location":"#citation","text":"Tristan Deleu, Tobias W\u00fcrfl, Mandana Samiei, Joseph Paul Cohen, and Yoshua Bengio. Torchmeta: A Meta-Learning library for PyTorch, 2019 [ ArXiv ] If you want to cite Torchmeta, use the following Bibtex entry: @misc{deleu2019torchmeta, title={{Torchmeta: A Meta-Learning library for PyTorch}}, author={Deleu, Tristan and W\\\"urfl, Tobias and Samiei, Mandana and Cohen, Joseph Paul and Bengio, Yoshua}, year={2019}, url={https://arxiv.org/abs/1909.06576}, note={Available at: https://github.com/tristandeleu/pytorch-meta} }","title":"Citation"},{"location":"api_reference/datasets/","text":"Omniglot The Omniglot dataset [1]. A dataset of 1623 handwritten characters from 50 different alphabets. torchmeta . datasets . Omniglot ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , use_vinyals_split = True , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder omniglot exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . use_vinyals_split : bool (default: True ) If set to True , the dataset uses the splits defined in [3]. If False , then the meta-train split corresponds to images_background , and the meta-test split corresponds to images_evaluation (raises an error when calling the meta-validation split). transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the zip files and processes the dataset in the root directory (under the omniglot folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the original Omniglot repository . The meta train/validation/test splits used in [3] are taken from this repository . These splits are over 1028/172/423 classes (characters). References [1] Lake, B. M., Salakhutdinov, R., and Tenenbaum, J. B. (2015). Human-level concept learning through probabilistic program induction. Science, 350(6266), 1332-1338 (http://www.sciencemag.org/content/350/6266/1332.short) [2] Lake, B. M., Salakhutdinov, R., and Tenenbaum, J. B. (2019). The Omniglot Challenge: A 3-Year Progress Report (https://arxiv.org/abs/1902.03477) [3] Vinyals, O., Blundell, C., Lillicrap, T. and Wierstra, D. (2016). Matching Networks for One Shot Learning. In Advances in Neural Information Processing Systems (pp. 3630-3638) (https://arxiv.org/abs/1606.04080) MiniImagenet The Mini-Imagenet dataset, introduced in [1]. This dataset contains images of 100 different classes from the ILSVRC-12 dataset (Imagenet challenge). The meta train/validation/test splits are taken from [2] for reproducibility. torchmeta . datasets . MiniImagenet ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder miniimagenet exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the miniimagenet folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from this repository . The meta train/validation/test splits are over 64/16/20 classes. References [1] Vinyals, O., Blundell, C., Lillicrap, T. and Wierstra, D. (2016). Matching Networks for One Shot Learning. In Advances in Neural Information Processing Systems (pp. 3630-3638) (https://arxiv.org/abs/1606.04080) [2] Ravi, S. and Larochelle, H. (2016). Optimization as a Model for Few-Shot Learning. (https://openreview.net/forum?id=rJY0-Kcll) TieredImagenet The Tiered-Imagenet dataset, introduced in [1]. This dataset contains images of 608 different classes from the ILSVRC-12 dataset (Imagenet challenge). torchmeta . datasets . TieredImagenet ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder tieredimagenet exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the tieredimagenet folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from this repository . The dataset contains images from 34 categories. The meta train/validation/test splits are over 20/6/8 categories. Each category contains between 10 and 30 classes. The splits over categories (instead of over classes) ensures that all the training classes are sufficiently distinct from the test classes (unlike Mini-Imagenet). References [1] Ren, M., Triantafillou, E., Ravi, S., Snell, J., Swersky, K., Tenenbaum, J.B., Larochelle, H. and Zemel, R.S. (2018). Meta-learning for semi-supervised few-shot classification. International Conference on Learning Representations. (https://arxiv.org/abs/1803.00676) FC100 The Fewshot-CIFAR100 dataset, introduced in [1]. This dataset contains images of 100 different classes from the CIFAR100 dataset [2]. torchmeta . datasets . FC100 ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cifar100 exists. num_classes_per_task : int Number of classes per tasks. This corresponds to N in N-way classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cifar100 folder). If the dataset is already available, this does not download/process the dataset again. Notes The meta train/validation/test splits are over 12/4/4 superclasses from the CIFAR100 dataset. The meta train/validation/test splits contain 60/20/20 classes. References [1] Oreshkin B. N., Rodriguez P., Lacoste A. (2018). TADAM: Task dependent adaptive metric for improved few-shot learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1805.10123) [2] Krizhevsky A. (2009). Learning Multiple Layers of Features from Tiny Images. (https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf) CIFARFS The CIFAR-FS dataset, introduced in [1]. This dataset contains images of 100 different classes from the CIFAR100 dataset [2]. torchmeta . datasets . CIFARFS ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cifar100 exists. num_classes_per_task : int Number of classes per tasks. This corresponds to N in N-way classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cifar100 folder). If the dataset is already available, this does not download/process the dataset again. Notes The meta train/validation/test splits are over 64/16/20 classes from the CIFAR100 dataset. References [1] Bertinetto L., Henriques J. F., Torr P. H.S., Vedaldi A. (2019). Meta-learning with differentiable closed-form solvers. In International Conference on Learning Representations (https://arxiv.org/abs/1805.08136) [2] Krizhevsky A. (2009). Learning Multiple Layers of Features from Tiny Images. (https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf) CUB The Caltech-UCSD Birds dataset, introduced in [1]. This dataset is based on images from 200 species of birds from the Caltech-UCSD Birds dataset [2]. torchmeta . datasets . CUB ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cub exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cub folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from [2]. The dataset contains images from 200 classes. The meta train/validation/test splits are over 100/50/50 classes. The splits are taken from [3] ( code for reproducibility). References [1] Hilliard, N., Phillips, L., Howland, S., Yankov, A., Corley, C. D., Hodas, N. O. (2018). Few-Shot Learning with Metric-Agnostic Conditional Embeddings. (https://arxiv.org/abs/1802.04376) [2] Wah, C., Branson, S., Welinder, P., Perona, P., Belongie, S. (2011). The Caltech-UCSD Birds-200-2011 Dataset (http://www.vision.caltech.edu/visipedia/CUB-200-2011.html) [3] Chen, W., Liu, Y. and Kira, Z. and Wang, Y. and Huang, J. (2019). A Closer Look at Few-shot Classification. International Conference on Learning Representations (https://openreview.net/forum?id=HkxLXnAcFQ) DoubleMNIST The Double MNIST dataset, introduced in [1]. This dataset is based on the MNIST dataset [2]. It consists of sampled images from MNIST that are put together to create images with multiple digits. It contains 100,000 images from 100 different classes (1000 images per class, for the numbers 00 to 99). torchmeta . datasets . DoubleMNIST ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder doublemnist exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the doublemnist folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the Multi-digit MNIST repository 1 . The dataset contains images (MNIST double digits) from 100 classes, for the numbers 00 to 99. The meta train/validation/test splits are 64/16/20 classes. The splits are taken from [1]. References [1] Sun, S. (2019). Multi-digit MNIST for Few-shot Learning. (https://github.com/shaohua0116/MultiDigitMNIST) [2] LeCun, Y., Cortes, C., and Burges, CJ. (2010). MNIST Handwritten Digit Database. (http://yann.lecun.com/exdb/mnist) TripleMNIST The Triple MNIST dataset, introduced in [1]. This dataset is based on the MNIST dataset [2]. It consists of sampled images from MNIST that are put together to create images with multiple digits. It contains 1,000,000 images from 1000 different classes (1000 images per class, for the numbers 000 to 999). torchmeta . datasets . TripleMNIST ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder triplemnist exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the triplemnist folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the Multi-digit MNIST repository 1 . The dataset contains images (MNIST triple digits) from 1000 classes, for the numbers 000 to 999. The meta train/validation/test splits are 640/160/200 classes. The splits are taken from [1]. References [1] Sun, S. (2019). Multi-digit MNIST for Few-shot Learning. (https://github.com/shaohua0116/MultiDigitMNIST) [2] LeCun, Y., Cortes, C., and Burges, CJ. (2010). MNIST Handwritten Digit Database. (http://yann.lecun.com/exdb/mnist) TCGA The TCGA dataset [1]. A dataset of classification tasks over the values of an attribute, based on the gene expression data from patients diagnosed with specific types of cancer. This dataset is based on data from the Cancer Genome Atlas Program from the National Cancer Institute. torchmeta . datasets . TCGA ( root , meta_train = False , meta_val = False , meta_test = False , meta_split = None , min_samples_per_class = 5 , transform = None , target_transform = None , dataset_transform = None , download = False , chunksize = 100 , preload = True ) Parameters root : string Root directory where the dataset folder omniglot exists. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . min_samples_per_class : int (default: 5) Minimum number of samples per class in each classification task. This filters tasks for which the amount of data for one of the classes is too small. transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . download : bool (default: False ) If True , downloads the files and processes the dataset in the root directory (under the tcga folder). If the dataset is already available, this does not download/process the dataset again. chunksize : int (default: 100) Size of the chunks to be processed when reading the CSV file. This is only used while downloading and converting the dataset to HDF5. preload : bool (default: True ) Opens the gene expression dataset and keeps a reference to it in memory. This decreases the loading time of individual tasks. Notes A task is the combination of a cancer type and an attribute. The data is the gene expression of patients diagnosed with the cancer defined by the task. It consists in a vector of size (20530,) . The task is to classify the patients according to the attribute given by the task definition. The meta train/validation/test splits are over 137/29/29 tasks (ie. types of cancer). However, the number of tasks depends on the minimum number of samples per class specified by min_samples_per_class . References [1] Samiei, M., Wurfl, T., Deleu, T., Weiss, M., Dutil, F., Fevens, T., Boucher, G., Lemieux, S., and Cohen, J. P. (2019). The TCGA Meta-Dataset Clinical Benchmark. (https://arxiv.org/abs/1910.08636) Pascal5i Pascal5i dataset [1]. A dataset for few-shot object segmentation supporting 4 folds each fold has 15 training classes and 5 testing classes. Using Preprocessed Masks from [2] torchmeta . datasets . Pascal5i ( root , num_classes_per_task = None , meta_train = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False , fold = 0 ) Parameters root : string Root directory where the dataset folder omniglot exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the zip files and processes the dataset in the root directory (under the omniglot folder). If the dataset is already available, this does not download/process the dataset again. fold : int (default: 0) Fold number ranges between 0-3 that controls training(15) and testing(5) classes. Notes Currently Only 1-way is supported References [1] Shaban, Amirreza, et al. \"One-shot learning for semantic segmentation.\" arXiv preprint arXiv:1709.03410 (2017). [2] Zhang, Chi, et al. \"Canet: Class-agnostic segmentation networks with iterative refinement and attentive few-shot learning.\" Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2019.","title":"Datasets"},{"location":"api_reference/datasets/#omniglot","text":"The Omniglot dataset [1]. A dataset of 1623 handwritten characters from 50 different alphabets. torchmeta . datasets . Omniglot ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , use_vinyals_split = True , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder omniglot exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . use_vinyals_split : bool (default: True ) If set to True , the dataset uses the splits defined in [3]. If False , then the meta-train split corresponds to images_background , and the meta-test split corresponds to images_evaluation (raises an error when calling the meta-validation split). transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the zip files and processes the dataset in the root directory (under the omniglot folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the original Omniglot repository . The meta train/validation/test splits used in [3] are taken from this repository . These splits are over 1028/172/423 classes (characters). References [1] Lake, B. M., Salakhutdinov, R., and Tenenbaum, J. B. (2015). Human-level concept learning through probabilistic program induction. Science, 350(6266), 1332-1338 (http://www.sciencemag.org/content/350/6266/1332.short) [2] Lake, B. M., Salakhutdinov, R., and Tenenbaum, J. B. (2019). The Omniglot Challenge: A 3-Year Progress Report (https://arxiv.org/abs/1902.03477) [3] Vinyals, O., Blundell, C., Lillicrap, T. and Wierstra, D. (2016). Matching Networks for One Shot Learning. In Advances in Neural Information Processing Systems (pp. 3630-3638) (https://arxiv.org/abs/1606.04080)","title":"Omniglot"},{"location":"api_reference/datasets/#miniimagenet","text":"The Mini-Imagenet dataset, introduced in [1]. This dataset contains images of 100 different classes from the ILSVRC-12 dataset (Imagenet challenge). The meta train/validation/test splits are taken from [2] for reproducibility. torchmeta . datasets . MiniImagenet ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder miniimagenet exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the miniimagenet folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from this repository . The meta train/validation/test splits are over 64/16/20 classes. References [1] Vinyals, O., Blundell, C., Lillicrap, T. and Wierstra, D. (2016). Matching Networks for One Shot Learning. In Advances in Neural Information Processing Systems (pp. 3630-3638) (https://arxiv.org/abs/1606.04080) [2] Ravi, S. and Larochelle, H. (2016). Optimization as a Model for Few-Shot Learning. (https://openreview.net/forum?id=rJY0-Kcll)","title":"MiniImagenet"},{"location":"api_reference/datasets/#tieredimagenet","text":"The Tiered-Imagenet dataset, introduced in [1]. This dataset contains images of 608 different classes from the ILSVRC-12 dataset (Imagenet challenge). torchmeta . datasets . TieredImagenet ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder tieredimagenet exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the tieredimagenet folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from this repository . The dataset contains images from 34 categories. The meta train/validation/test splits are over 20/6/8 categories. Each category contains between 10 and 30 classes. The splits over categories (instead of over classes) ensures that all the training classes are sufficiently distinct from the test classes (unlike Mini-Imagenet). References [1] Ren, M., Triantafillou, E., Ravi, S., Snell, J., Swersky, K., Tenenbaum, J.B., Larochelle, H. and Zemel, R.S. (2018). Meta-learning for semi-supervised few-shot classification. International Conference on Learning Representations. (https://arxiv.org/abs/1803.00676)","title":"TieredImagenet"},{"location":"api_reference/datasets/#fc100","text":"The Fewshot-CIFAR100 dataset, introduced in [1]. This dataset contains images of 100 different classes from the CIFAR100 dataset [2]. torchmeta . datasets . FC100 ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cifar100 exists. num_classes_per_task : int Number of classes per tasks. This corresponds to N in N-way classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cifar100 folder). If the dataset is already available, this does not download/process the dataset again. Notes The meta train/validation/test splits are over 12/4/4 superclasses from the CIFAR100 dataset. The meta train/validation/test splits contain 60/20/20 classes. References [1] Oreshkin B. N., Rodriguez P., Lacoste A. (2018). TADAM: Task dependent adaptive metric for improved few-shot learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1805.10123) [2] Krizhevsky A. (2009). Learning Multiple Layers of Features from Tiny Images. (https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf)","title":"FC100"},{"location":"api_reference/datasets/#cifarfs","text":"The CIFAR-FS dataset, introduced in [1]. This dataset contains images of 100 different classes from the CIFAR100 dataset [2]. torchmeta . datasets . CIFARFS ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cifar100 exists. num_classes_per_task : int Number of classes per tasks. This corresponds to N in N-way classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cifar100 folder). If the dataset is already available, this does not download/process the dataset again. Notes The meta train/validation/test splits are over 64/16/20 classes from the CIFAR100 dataset. References [1] Bertinetto L., Henriques J. F., Torr P. H.S., Vedaldi A. (2019). Meta-learning with differentiable closed-form solvers. In International Conference on Learning Representations (https://arxiv.org/abs/1805.08136) [2] Krizhevsky A. (2009). Learning Multiple Layers of Features from Tiny Images. (https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf)","title":"CIFARFS"},{"location":"api_reference/datasets/#cub","text":"The Caltech-UCSD Birds dataset, introduced in [1]. This dataset is based on images from 200 species of birds from the Caltech-UCSD Birds dataset [2]. torchmeta . datasets . CUB ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder cub exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the cub folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from [2]. The dataset contains images from 200 classes. The meta train/validation/test splits are over 100/50/50 classes. The splits are taken from [3] ( code for reproducibility). References [1] Hilliard, N., Phillips, L., Howland, S., Yankov, A., Corley, C. D., Hodas, N. O. (2018). Few-Shot Learning with Metric-Agnostic Conditional Embeddings. (https://arxiv.org/abs/1802.04376) [2] Wah, C., Branson, S., Welinder, P., Perona, P., Belongie, S. (2011). The Caltech-UCSD Birds-200-2011 Dataset (http://www.vision.caltech.edu/visipedia/CUB-200-2011.html) [3] Chen, W., Liu, Y. and Kira, Z. and Wang, Y. and Huang, J. (2019). A Closer Look at Few-shot Classification. International Conference on Learning Representations (https://openreview.net/forum?id=HkxLXnAcFQ)","title":"CUB"},{"location":"api_reference/datasets/#doublemnist","text":"The Double MNIST dataset, introduced in [1]. This dataset is based on the MNIST dataset [2]. It consists of sampled images from MNIST that are put together to create images with multiple digits. It contains 100,000 images from 100 different classes (1000 images per class, for the numbers 00 to 99). torchmeta . datasets . DoubleMNIST ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder doublemnist exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the doublemnist folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the Multi-digit MNIST repository 1 . The dataset contains images (MNIST double digits) from 100 classes, for the numbers 00 to 99. The meta train/validation/test splits are 64/16/20 classes. The splits are taken from [1]. References [1] Sun, S. (2019). Multi-digit MNIST for Few-shot Learning. (https://github.com/shaohua0116/MultiDigitMNIST) [2] LeCun, Y., Cortes, C., and Burges, CJ. (2010). MNIST Handwritten Digit Database. (http://yann.lecun.com/exdb/mnist)","title":"DoubleMNIST"},{"location":"api_reference/datasets/#triplemnist","text":"The Triple MNIST dataset, introduced in [1]. This dataset is based on the MNIST dataset [2]. It consists of sampled images from MNIST that are put together to create images with multiple digits. It contains 1,000,000 images from 1000 different classes (1000 images per class, for the numbers 000 to 999). torchmeta . datasets . TripleMNIST ( root , num_classes_per_task = None , meta_train = False , meta_val = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False ) Parameters root : string Root directory where the dataset folder triplemnist exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the pickle files and processes the dataset in the root directory (under the triplemnist folder). If the dataset is already available, this does not download/process the dataset again. Notes The dataset is downloaded from the Multi-digit MNIST repository 1 . The dataset contains images (MNIST triple digits) from 1000 classes, for the numbers 000 to 999. The meta train/validation/test splits are 640/160/200 classes. The splits are taken from [1]. References [1] Sun, S. (2019). Multi-digit MNIST for Few-shot Learning. (https://github.com/shaohua0116/MultiDigitMNIST) [2] LeCun, Y., Cortes, C., and Burges, CJ. (2010). MNIST Handwritten Digit Database. (http://yann.lecun.com/exdb/mnist)","title":"TripleMNIST"},{"location":"api_reference/datasets/#tcga","text":"The TCGA dataset [1]. A dataset of classification tasks over the values of an attribute, based on the gene expression data from patients diagnosed with specific types of cancer. This dataset is based on data from the Cancer Genome Atlas Program from the National Cancer Institute. torchmeta . datasets . TCGA ( root , meta_train = False , meta_val = False , meta_test = False , meta_split = None , min_samples_per_class = 5 , transform = None , target_transform = None , dataset_transform = None , download = False , chunksize = 100 , preload = True ) Parameters root : string Root directory where the dataset folder omniglot exists. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_val : bool (default: False ) Use the meta-validation split of the dataset. If set to True , then the arguments meta_train and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'val', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , meta_val and meta_test if all three are set to False . min_samples_per_class : int (default: 5) Minimum number of samples per class in each classification task. This filters tasks for which the amount of data for one of the classes is too small. transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . target_transform : callable, optional A function/transform that takes a target, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. transforms.ClassSplitter() . download : bool (default: False ) If True , downloads the files and processes the dataset in the root directory (under the tcga folder). If the dataset is already available, this does not download/process the dataset again. chunksize : int (default: 100) Size of the chunks to be processed when reading the CSV file. This is only used while downloading and converting the dataset to HDF5. preload : bool (default: True ) Opens the gene expression dataset and keeps a reference to it in memory. This decreases the loading time of individual tasks. Notes A task is the combination of a cancer type and an attribute. The data is the gene expression of patients diagnosed with the cancer defined by the task. It consists in a vector of size (20530,) . The task is to classify the patients according to the attribute given by the task definition. The meta train/validation/test splits are over 137/29/29 tasks (ie. types of cancer). However, the number of tasks depends on the minimum number of samples per class specified by min_samples_per_class . References [1] Samiei, M., Wurfl, T., Deleu, T., Weiss, M., Dutil, F., Fevens, T., Boucher, G., Lemieux, S., and Cohen, J. P. (2019). The TCGA Meta-Dataset Clinical Benchmark. (https://arxiv.org/abs/1910.08636)","title":"TCGA"},{"location":"api_reference/datasets/#pascal5i","text":"Pascal5i dataset [1]. A dataset for few-shot object segmentation supporting 4 folds each fold has 15 training classes and 5 testing classes. Using Preprocessed Masks from [2] torchmeta . datasets . Pascal5i ( root , num_classes_per_task = None , meta_train = False , meta_test = False , meta_split = None , transform = None , target_transform = None , dataset_transform = None , class_augmentations = None , download = False , fold = 0 ) Parameters root : string Root directory where the dataset folder omniglot exists. num_classes_per_task : int Number of classes per tasks. This corresponds to \"N\" in \"N-way\" classification. meta_train : bool (default: False ) Use the meta-train split of the dataset. If set to True , then the arguments meta_val and meta_test must be set to False . Exactly one of these three arguments must be set to True . meta_test : bool (default: False ) Use the meta-test split of the dataset. If set to True , then the arguments meta_train and meta_val must be set to False . Exactly one of these three arguments must be set to True . meta_split : string in {'train', 'test'}, optional Name of the split to use. This overrides the arguments meta_train , and meta_test if all three are set to False . transform : callable, optional A function/transform that takes a PIL image, and returns a transformed version. See also torchvision.transforms . dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . class_augmentations : list of callable, optional A list of functions that augment the dataset with new classes. These classes are transformations of existing classes. E.g. torchmeta.transforms.HorizontalFlip() . download : bool (default: False ) If True , downloads the zip files and processes the dataset in the root directory (under the omniglot folder). If the dataset is already available, this does not download/process the dataset again. fold : int (default: 0) Fold number ranges between 0-3 that controls training(15) and testing(5) classes. Notes Currently Only 1-way is supported References [1] Shaban, Amirreza, et al. \"One-shot learning for semantic segmentation.\" arXiv preprint arXiv:1709.03410 (2017). [2] Zhang, Chi, et al. \"Canet: Class-agnostic segmentation networks with iterative refinement and attentive few-shot learning.\" Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2019.","title":"Pascal5i"},{"location":"api_reference/modules/","text":"MetaBatchNorm1d torchmeta . modules . MetaBatchNorm1d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm1d MetaBatchNorm2d torchmeta . modules . MetaBatchNorm2d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm2d MetaBatchNorm3d torchmeta . modules . MetaBatchNorm3d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm3d MetaSequential torchmeta . modules . MetaSequential ( * args ) Notes See: torch.nn.Sequential MetaConv1d torchmeta . modules . MetaConv1d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv1d MetaConv2d torchmeta . modules . MetaConv2d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv2d MetaConv3d torchmeta . modules . MetaConv3d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv3d MetaLinear torchmeta . modules . MetaLinear ( in_features , out_features , bias = True ) Notes See: torch.nn.Linear MetaBilinear torchmeta . modules . MetaBilinear ( in1_features , in2_features , out_features , bias = True ) Notes See: torch.nn.Bilinear MetaModule Base class for PyTorch meta-learning modules. These modules accept an additional argument params in their forward method. torchmeta . modules . MetaModule () Notes Objects inherited from MetaModule are fully compatible with PyTorch modules from torch.nn.Module . The argument params is a dictionary of tensors, with full support of the computation graph (for differentiation). MetaLayerNorm torchmeta . modules . MetaLayerNorm ( normalized_shape , eps = 1e-05 , elementwise_affine = True ) Notes See: torch.nn.LayerNorm DataParallel torchmeta . modules . DataParallel ( module , device_ids = None , output_device = None , dim = 0 ) Notes See: torch.nn.Parallel","title":"Modules"},{"location":"api_reference/modules/#metabatchnorm1d","text":"torchmeta . modules . MetaBatchNorm1d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm1d","title":"MetaBatchNorm1d"},{"location":"api_reference/modules/#metabatchnorm2d","text":"torchmeta . modules . MetaBatchNorm2d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm2d","title":"MetaBatchNorm2d"},{"location":"api_reference/modules/#metabatchnorm3d","text":"torchmeta . modules . MetaBatchNorm3d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) Notes See: torch.nn.BatchNorm3d","title":"MetaBatchNorm3d"},{"location":"api_reference/modules/#metasequential","text":"torchmeta . modules . MetaSequential ( * args ) Notes See: torch.nn.Sequential","title":"MetaSequential"},{"location":"api_reference/modules/#metaconv1d","text":"torchmeta . modules . MetaConv1d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv1d","title":"MetaConv1d"},{"location":"api_reference/modules/#metaconv2d","text":"torchmeta . modules . MetaConv2d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv2d","title":"MetaConv2d"},{"location":"api_reference/modules/#metaconv3d","text":"torchmeta . modules . MetaConv3d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ) Notes See: torch.nn.Conv3d","title":"MetaConv3d"},{"location":"api_reference/modules/#metalinear","text":"torchmeta . modules . MetaLinear ( in_features , out_features , bias = True ) Notes See: torch.nn.Linear","title":"MetaLinear"},{"location":"api_reference/modules/#metabilinear","text":"torchmeta . modules . MetaBilinear ( in1_features , in2_features , out_features , bias = True ) Notes See: torch.nn.Bilinear","title":"MetaBilinear"},{"location":"api_reference/modules/#metamodule","text":"Base class for PyTorch meta-learning modules. These modules accept an additional argument params in their forward method. torchmeta . modules . MetaModule () Notes Objects inherited from MetaModule are fully compatible with PyTorch modules from torch.nn.Module . The argument params is a dictionary of tensors, with full support of the computation graph (for differentiation).","title":"MetaModule"},{"location":"api_reference/modules/#metalayernorm","text":"torchmeta . modules . MetaLayerNorm ( normalized_shape , eps = 1e-05 , elementwise_affine = True ) Notes See: torch.nn.LayerNorm","title":"MetaLayerNorm"},{"location":"api_reference/modules/#dataparallel","text":"torchmeta . modules . DataParallel ( module , device_ids = None , output_device = None , dim = 0 ) Notes See: torch.nn.Parallel","title":"DataParallel"},{"location":"api_reference/toy/","text":"Harmonic Simple regression task, based on the sum of two sine waves, as introduced in [1]. torchmeta . toy . Harmonic ( num_samples_per_task , num_tasks = 5000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 5,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is the sum of 2 sine functions of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as the sum of two sinusoid functions, with a frequency ratio of 2. The amplitudes vary within [5.0, 7.0], the phases within [0, 2 * pi], and the inputs are sampled according to N(mu_x, 1), with mu_x varying in [-4.0, 4.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Lacoste A., Oreshkin B., Chung W., Boquet T., Rostamzadeh N., Krueger D. (2018). Uncertainty in Multitask Transfer Learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1806.07528) Sinusoid Simple regression task, based on sinusoids, as introduced in [1]. torchmeta . toy . Sinusoid ( num_samples_per_task , num_tasks = 1000000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 1,000,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is a sine function of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as random sinusoid function. The amplitude varies within [0.1, 5.0], the phase within [0, pi], and the inputs are sampled uniformly in [-5.0, 5.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Finn C., Abbeel P., and Levine, S. (2017). Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks. International Conference on Machine Learning (ICML) (https://arxiv.org/abs/1703.03400) SinusoidAndLine Simple multimodal regression task, based on sinusoids and lines, as introduced in [1]. torchmeta . toy . SinusoidAndLine ( num_samples_per_task , num_tasks = 1000000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 1,000,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is either a sine function, or a linear function of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as either random sinusoid functions, or random linear functions. The amplitude of the sinusoids varies within [0.1, 5.0] and the phase within [0, pi]. The slope and intercept of the lines vary in [-3.0, 3.0]. The inputs are sampled uniformly in [-5.0, 5.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Finn C., Xu K., Levine S. (2018). Probabilistic Model-Agnostic Meta-Learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1806.02817)","title":"Toy"},{"location":"api_reference/toy/#harmonic","text":"Simple regression task, based on the sum of two sine waves, as introduced in [1]. torchmeta . toy . Harmonic ( num_samples_per_task , num_tasks = 5000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 5,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is the sum of 2 sine functions of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as the sum of two sinusoid functions, with a frequency ratio of 2. The amplitudes vary within [5.0, 7.0], the phases within [0, 2 * pi], and the inputs are sampled according to N(mu_x, 1), with mu_x varying in [-4.0, 4.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Lacoste A., Oreshkin B., Chung W., Boquet T., Rostamzadeh N., Krueger D. (2018). Uncertainty in Multitask Transfer Learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1806.07528)","title":"Harmonic"},{"location":"api_reference/toy/#sinusoid","text":"Simple regression task, based on sinusoids, as introduced in [1]. torchmeta . toy . Sinusoid ( num_samples_per_task , num_tasks = 1000000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 1,000,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is a sine function of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as random sinusoid function. The amplitude varies within [0.1, 5.0], the phase within [0, pi], and the inputs are sampled uniformly in [-5.0, 5.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Finn C., Abbeel P., and Levine, S. (2017). Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks. International Conference on Machine Learning (ICML) (https://arxiv.org/abs/1703.03400)","title":"Sinusoid"},{"location":"api_reference/toy/#sinusoidandline","text":"Simple multimodal regression task, based on sinusoids and lines, as introduced in [1]. torchmeta . toy . SinusoidAndLine ( num_samples_per_task , num_tasks = 1000000 , noise_std = None , transform = None , target_transform = None , dataset_transform = None ) Parameters num_samples_per_task : int Number of examples per task. num_tasks : int (default: 1,000,000) Overall number of tasks to sample. noise_std : float, optional Amount of noise to include in the targets for each task. If None , then nos noise is included, and the target is either a sine function, or a linear function of the input. transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the input. target_transform : callable, optional A function/transform that takes a numpy array of size (1,) and returns a transformed version of the target. dataset_transform : callable, optional A function/transform that takes a dataset (ie. a task), and returns a transformed version of it. E.g. torchmeta.transforms.ClassSplitter() . Notes The tasks are created randomly as either random sinusoid functions, or random linear functions. The amplitude of the sinusoids varies within [0.1, 5.0] and the phase within [0, pi]. The slope and intercept of the lines vary in [-3.0, 3.0]. The inputs are sampled uniformly in [-5.0, 5.0]. Due to the way PyTorch handles datasets, the number of tasks to be sampled needs to be fixed ahead of time (with num_tasks ). This will typically be equal to meta_batch_size * num_batches . References [1] Finn C., Xu K., Levine S. (2018). Probabilistic Model-Agnostic Meta-Learning. In Advances in Neural Information Processing Systems (https://arxiv.org/abs/1806.02817)","title":"SinusoidAndLine"},{"location":"api_reference/transforms/","text":"Categorical Target transform to return labels in [0, num_classes) . torchmeta . transforms . Categorical ( num_classes = None ) Parameters num_classes : int, optional Number of classes. If None , then the number of classes is inferred from the number of individual labels encountered.","title":"Transforms"},{"location":"api_reference/transforms/#categorical","text":"Target transform to return labels in [0, num_classes) . torchmeta . transforms . Categorical ( num_classes = None ) Parameters num_classes : int, optional Number of classes. If None , then the number of classes is inferred from the number of individual labels encountered.","title":"Categorical"}]}